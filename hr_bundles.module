<?php
/**
 * @file
 * Code for the Bundles feature.
 */

include_once 'hr_bundles.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function hr_bundles_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return "plugins/entityreference/$plugin";
  }
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
}


/**
 * Get operation from bundle GID
 */
function _hr_bundles_get_operation($gid) {
  $og_groups = entity_load('node', array($gid));
  $og_group = $og_groups[$gid];
  if ($og_group->type == 'hr_bundle') {
    $operations = og_get_entity_groups('node', $og_group);
    if (isset($operations['node']) && count($operations['node'])) {
      return array_pop($operations['node']);
    }
    else {
      return 0;
    }
  }
  else {
    return 0;
  }
}

/**
 * Get bundles from operation GID
 */
function _hr_bundles_get_bundles($gid) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'hr_bundle')
    ->propertyCondition('status', 1)
    ->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $gid, '=')
    ->fieldCondition(OG_GROUP_FIELD, 'value', 1, '=')
    ->execute();
  if (isset($entities['node'])) {
    return entity_load('node', array_keys($entities['node']));
  }
  else {
    return array();
  }
}

/**
 * Load role by name
 */
function _hr_bundles_og_role_load_by_name($bundle, $name) {
  $roles = og_roles('node', $bundle);
  $rid = array_search($name, $roles);
  return $rid;
}


/**
 * Implements hook_og_context_negotiation_info().
 */
function hr_bundles_og_context_negotiation_info() {
  $providers = array();

  $providers['hr_bundles'] = array(
    'name' => t('HR Bundle'),
    'description' => t('Sets operation context within bundle'),
    'callback' => 'hr_bundles_og_context_handler',
    'menu path' => array('node/%', 'group/%/%/admin'),
  );
  return $providers;
}

function hr_bundles_og_context_handler($node = NULL) {
  $context = og_context_handler_node($node);
  if (!empty($context) && isset($context['node'])) {
    $operation = NULL;
    foreach ($context['node'] as $id => $gid) {
      $node = node_load($gid);
      if ($node->type == 'hr_operation') {
        $operation = $node;
        break;
      }
    }
    if ($operation != NULL) {
      array_unshift($context['node'], $operation->nid);
    }
    else {
      $gid = reset($context['node']);
      $op_gid = _hr_bundles_get_operation($gid);
      if (!empty($op_gid)) {
        $context['node'][0] = $op_gid;
      }
    }
  }
  return $context;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter()
 */
function hr_bundles_form_node_form_alter(&$form, &$form_state) {
  global $user;
  if (isset($form['field_bundles']) && isset($form_state['entityreference_prepopulate'])) {
    // Get operation gid
    $type = $form_state['node']->type;
    $op_gid = $form_state['entityreference_prepopulate']['node'][$type][OG_AUDIENCE_FIELD][0];
    // Make sure it is an operation
    $op = entity_load('node', array($op_gid));
    $op = $op[$op_gid];
    if ($op->type == 'hr_operation') {
      $roles = og_get_user_roles('node', $op_gid);
      if (!in_array('manager', $roles) && !in_array('editor', $roles) && !in_array('contributor', $roles) && $op->uid != $user->uid && !in_array('editor', $user->roles)) {
        // If user is not a manager or editor of operation, make bundles field required
        $form['field_bundles'][LANGUAGE_NONE][0]['#required'] = TRUE;
        $form['field_bundles'][LANGUAGE_NONE][0]['default']['#required'] = TRUE;
      }
      // If we are within an operation, hide the global clusters field
      if (isset($form['field_sectors'])) {
        $form['field_sectors']['#attributes']['class'][] = 'hidden';
      }
    }
    else {
      // Otherwise hide the bundles field
      $form['field_bundles']['#attributes']['class'][] = 'hidden';
    }
  }
}

/**
 * Implements hook_og_role_grant($entity_type, $gid, $uid, $rid)
 */
function hr_bundles_og_role_grant($entity_type, $gid, $uid, $rid) {
  $group = entity_load('node', array($gid));
  $group = $group[$gid];
  $role = og_role_load($rid);
  // WHEN granting manager or editor role to bundle
  if ($group->type == 'hr_bundle' && ($role->name == 'manager' || $role->name == 'editor')) {
    // Get operation
    $op_gid = _hr_bundles_get_operation($gid);
    if (!empty($op_gid)) {
      if (!og_is_member('node', $op_gid, 'user', user_load($uid))) {
        // Make user a member of operation
        $og_membership = og_membership_create('node', $op_gid, 'user', $uid, 'og_user_node');
        og_membership_save($og_membership);
      }
      $rid = _hr_bundles_og_role_load_by_name('hr_operation', 'bundle member');
      drupal_static_reset('og_get_user_roles');
      $roles = og_get_user_roles('node', $op_gid, $uid);
      if (!in_array('manager', $roles) && !in_array('editor', $roles)) {
        og_role_grant('node', $op_gid, $uid, $rid);
      }
    }
  }
  elseif ($group->type == 'hr_operation' && ($role->name == 'manager' || $role->name == 'editor' || $role->name == 'contributor')) {
    // Grant role on all bundles
    $bundles = _hr_bundles_get_bundles($gid);
    $rid = _hr_bundles_og_role_load_by_name('hr_bundle', $role->name);
    foreach ($bundles as $bundle) {
      if (!og_is_member('node', $bundle->nid, 'user', user_load($uid))) {
        // Make user a member of bundle
        $og_membership = og_membership_create('node', $bundle->nid, 'user', $uid, 'og_user_node');
        og_membership_save($og_membership);
      }
      og_role_grant('node', $bundle->nid, $uid, $rid);
    }
  }
}

/**
 * Implements hook_og_role_revoke($entity_type, $gid, $uid, $rid)
 */
function hr_bundles_og_role_revoke($entity_type, $gid, $uid, $rid) {
  $group = entity_load('node', array($gid));
  $group = $group[$gid];
  $role = og_role_load($rid);
  // WHEN revoking manager or editor role of a bundle
  if ($group->type == 'hr_bundle' && ($role->name == 'manager' || $role->name == 'editor')) {
    $revoke = TRUE;
    // Get all bundles from operation
    $op_gid = _hr_bundles_get_operation($gid);
    $roles = og_get_user_roles('node', $op_gid, $uid);
    if (in_array('bundle member', $roles)) {
      $bundles = _hr_bundles_get_bundles($op_gid);
      foreach ($bundles as $bundle) {
        drupal_static_reset('og_get_user_roles');
        $roles = og_get_user_roles('node', $bundle->nid, $uid);
        if ($bundle->nid != $gid) {
          // If manager or editor of another bundle, don't revoke
          if (in_array('manager', $roles) || in_array('editor', $roles)) {
            $revoke = FALSE;
          }
        }
        else {
          // If user still had both roles
          if (in_array('manager', $roles) && in_array('editor', $roles) && !in_array(OG_ANONYMOUS_ROLE, $roles)) {
            $revoke = FALSE;
          }
        }
      }
      if ($revoke == TRUE) {
        $rid = _hr_bundles_og_role_load_by_name('hr_operation', 'bundle member');
        // Revoke bundle member from operation
        og_role_revoke('node', $op_gid, $uid, $rid);
      }
    }
  }
  elseif ($group->type == 'hr_operation' && ($role->name == 'manager' || $role->name == 'editor' || $role->name == 'contributor')) {
    // Revoke role from all bundles
    $bundles = _hr_bundles_get_bundles($gid);
    $rid = _hr_bundles_og_role_load_by_name('hr_bundle', $role->name);
    foreach ($bundles as $bundle) {
      og_role_revoke('node', $bundle->nid, $uid, $rid);
    }
  }
}

/**
 * Implements hook_og_membership_delete(OgMembership $og_membership)
 */
function hr_bundles_og_membership_delete(OgMembership $og_membership) {
  if ($og_membership->group_type == 'node' && $og_membership->entity_type == 'user') {
    // Get group
    $group = entity_load('node', array($og_membership->gid));
    $group = $group[$og_membership->gid];
    if ($group->type == 'hr_bundle') {
      $rid = _hr_bundles_og_role_load_by_name('hr_bundle', 'manager');
      hr_bundles_og_role_revoke('node', $og_membership->gid, $og_membership->etid, $rid);
    }
    elseif ($group->type == 'hr_operation') {
      // Remove from all bundles
      $bundles = _hr_bundles_get_bundles($og_membership->gid);
      foreach ($bundles as $bundle) {
        $bundle_membership = og_get_membership('node', $bundle->nid, 'user', $og_membership->etid);
        if (!empty($bundle_membership)) {
          og_membership_delete($bundle_membership->id);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function hr_bundles_form_og_ui_edit_membership_alter(&$form, &$form_state) {
  if (isset($form_state['build_info']['args'][1]) && isset($form_state['build_info']['args'][2])) {
    $op_gid = _hr_bundles_get_operation($form_state['build_info']['args'][1]);
    if (!empty($op_gid)) {
      $roles = og_get_user_roles('node', $op_gid);
      if (!in_array('manager', $roles)) {
        $og_membership = $form_state['build_info']['args'][2];
        $uid = $og_membership->etid;
        $roles = og_get_user_roles('node', $op_gid, $uid);
        if (in_array('manager', $roles) || in_array('editor', $roles)) {
          drupal_set_message(t('This person is a manager or editor of the operation. You can not downgrade his/her membership.'), 'warning');
          $form['og_user']['state']['#disabled'] = TRUE;
          if (in_array('manager', $roles)) {
            // Disable everything
            $form['og_user']['roles']['#disabled'] = TRUE;
          }
          else {
            $rid = _hr_bundles_og_role_load_by_name('hr_bundle', 'editor');
            $form['og_user']['roles'][$rid]['#disabled'] = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function hr_bundles_form_og_ui_delete_membership_alter(&$form, &$form_state) {
  if (isset($form_state['build_info']['args'][1]) && isset($form_state['build_info']['args'][2])) {
    $op_gid = _hr_bundles_get_operation($form_state['build_info']['args'][1]);
    if (!empty($op_gid)) {
      $roles = og_get_user_roles('node', $op_gid);
      if (!in_array('manager', $roles)) {
        $og_membership = $form_state['build_info']['args'][2];
        $uid = $og_membership->etid;
        $roles = og_get_user_roles('node', $op_gid, $uid);
        if (in_array('manager', $roles) || in_array('editor', $roles)) {
          drupal_set_message(t('This person is a manager or editor of the operation. You can not remove him/her from this group.'), 'error');
          $form['actions']['submit']['#disabled'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave()
 * Do not create og_menu for bundles
 */
function hr_bundles_node_presave($node) {
  if ($node->type == 'hr_bundle') {
    $node->og_menu = FALSE;
  }
}

function hr_bundles_openlayers_map_preprocess_alter($map) {
  if (isset($map['map_name']) && $map['map_name'] == 'hr_bundles') {
    drupal_add_js(drupal_get_path('module', 'hr_bundles').'/js/LayerSwitcherRadio.js', array('weight' => 50));
  }
}

/**
 * Implements hook_openlayers_behaviors().
 *
 * This is a ctools plugins hook.
 */
function hr_bundles_openlayers_behaviors() {
  return array(
    'hr_bundles_behavior_layerswitcherradio' => array(
      'title' => t('Layer Switcher Radio'),
      'description' => t('Provides the ability to switch layers in the map interface through radio buttons only.  This provides an expandable box on the map to enable and disable layers.'),
      'type' => 'map',
      'behavior' => array(
        'path' => drupal_get_path('module', 'hr_bundles') . '/behaviors',
        'file' => 'hr_bundles_behavior_layerswitcherradio.inc',
        'class' => 'hr_bundles_behavior_layerswitcherradio',
        'parent' => 'openlayers_behavior',
      ),
    ),
  );
}

/**
 * Implements hook_init()
 * Sets cluster context in countries and global pages
 */
function hr_bundles_init() {
  $path = current_path();
  $paths = array('coordination/clusters/countries', 'coordination/clusters/global');
  if (in_array($path, $paths)) {
    $group = node_load(12);
    og_context('node', $group);
  }
}

/**
 * Implements hook_block_info().
 */
function hr_bundles_block_info() {
  $blocks['clusters_map'] = array(
    'info' => t('Clusters Map'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function hr_bundles_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'clusters_map':
      // highcharts api
      drupal_add_js('https://code.highcharts.com/maps/highmaps.js', 'external');
      drupal_add_js('https://code.highcharts.com/maps/modules/exporting.js', 'external');
      drupal_add_js('https://code.highcharts.com/mapdata/custom/world.js', 'external');

      drupal_add_js(drupal_get_path('module', 'hr_bundles') . '/js/hr_bundles_map.js', 'file');

      drupal_add_css(drupal_get_path('module', 'hr_bundles') . '/css/hr_bundles_map.css', 'file');

      $block['content'] = '<div id="clusters-map" class="loading">';
        $block['content'] .= '<div id="clusters-map-overlay">'; // Map overlay tips

          $block['content'] .= '<div id="close-overlay" class="cursor-pointer">&times;</div>';

          $block['content'] .= '<p class="tips-clusters-map top-right">'.t("Download or link to this map").'</p>';
          $block['content'] .= '<p class="tips-clusters-map lower-left">'.t("Display active Clusters, Sectors or both").'</p>';
          $block['content'] .= '<p class="tips-clusters-map middle-bottom">'.t("Select the Cluster, Sector or Area-of-Responsibility to be displayed").'</p>';

          $block['content'] .= '<div id="ok-overlay" class="cursor-pointer">'.t("OK, I understand").'</div>';

        $block['content'] .= '</div>'; // end id="clusters-map-overlay"
      $block['content'] .= '</div>'; // end id="clusters-map"

      $block['content'].= '<div id="types">';
        $block['content'].= '<div type-id="sector" class="first type">' . t("Sector") . '</div>';
        $block['content'].= '<div type-id="cluster" class="type">' . t("Cluster") . '</div>';
      $block['content'].= '</div><br/>';
      $block['content'].= '<div id="global-clusters"></div>';
      break;
  }
  return $block;
}
